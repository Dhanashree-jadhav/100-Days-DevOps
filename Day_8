DevOps 100 Days â€“ Day 8: Installing Ansible 4.7.0 on Jump Host Using pip3

Introduction

Today in our DevOps 100 Days Challenge, we focused on setting up Ansible on a jump host.
Ansible is a powerful automation and configuration management tool used widely in DevOps for tasks like provisioning servers, deploying applications, and orchestrating workflows.

For our team, the jump host will act as the Ansible controller, allowing us to test tasks on other servers without installing Ansible everywhere.

The goal of this task was to:

Install Ansible 4.7.0 using pip3 only.

Make sure the Ansible binary is globally available for all users.

Step 1: Check the OS

Before installing, itâ€™s important to know which Linux distribution is running:

cat /etc/os-release

On our jump host, this showed:

NAME="CentOS Stream"
VERSION="9"
ID="centos"

Knowing the OS helps us decide the correct package manager and dependencies.
For CentOS Stream 9, we use dnf.

Step 2: Install Required Dependencies

Ansible requires Python 3 and some system libraries. We installed them with:

sudo dnf install python3 python3-pip gcc libffi-devel bzip2-devel

Explanation of each package:

python3 â†’ Required to run Ansible and Python modules.

python3-pip â†’ Needed to install Python packages like Ansible.

gcc â†’ Compiler for building certain Python packages.

libffi-devel â†’ Required by cryptography modules.

bzip2-devel â†’ Needed by Python modules that handle compressed files.

Note: python3-virtualenv was skipped because it required unavailable dependencies on CentOS Stream 9. Itâ€™s not needed for a global pip install.

Step 3: Upgrade pip

We upgraded pip to the latest version to ensure smooth installation:

sudo pip3 install --upgrade pip

After upgrading, pip installed its scripts in /usr/local/bin.
Since this path is sometimes not in PATH for all users, we added it:

export PATH=$PATH:/usr/local/bin

This ensures commands like ansible and pip3 are recognized by the shell.

Step 4: Install Ansible Globally

Next, we installed Ansible 4.7.0 globally using the upgraded pip:

sudo /usr/local/bin/pip3 install ansible==4.7.0

Why we used the full path /usr/local/bin/pip3:

Guarantees we are using the latest pip.

Avoids using the older system pip, which could cause errors.

Ensures Ansible is installed globally for all users.

Step 5: Verify Installation

To check that Ansible was installed correctly:

ansible --version

Output:

ansible [core 2.11.12]
executable location = /usr/local/bin/ansible
python version = 3.9.23

âœ… This confirms that:

The correct version of Ansible (4.7.0) is installed.

The binary is located in /usr/local/bin (globally accessible).

Python 3.9 is being used by Ansible.

Step 6: Global Access for All Users

Switching to a normal user and running:

ansible --version

Should also work, confirming that all users on the system can run Ansible commands.

Conclusion

In this task, we successfully:

Determined the OS and package manager.

Installed Python3 and required development libraries.

Upgraded pip3 to the latest version.

Installed Ansible 4.7.0 globally using pip3.

Ensured the Ansible binary is accessible to all users.

This setup allows our jump host to act as an Ansible controller, ready to automate tasks across servers.

Tomorrow Iâ€™ll tackle the next task â€” stay tuned! ðŸ™Œ

Blog Link : https://hashnode.com/post/cmfxqk9ch000102jo5woc9z91
